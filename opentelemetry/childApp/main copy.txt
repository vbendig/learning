// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Command jaeger is an example program that creates spans
// and uploads to Jaeger.
package main

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/nats-io/nats.go"
	"go.opentelemetry.io/otel"

	log "github.com/sirupsen/logrus"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/exporters/jaeger"
	"go.opentelemetry.io/otel/sdk/resource"
	tracesdk "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
)

const (
	service     = "trace-demo"
	environment = "production"
	id          = 2
	event       = "parentEvent"
	queue       = "parentQueue"
)

// tracerProvider returns an OpenTelemetry TracerProvider configured to use
// the Jaeger exporter that will send spans to the provided url. The returned
// TracerProvider will also use a Resource configured with all the information
// about the application.
func tracerProvider(url string) (*tracesdk.TracerProvider, error) {
	// Create the Jaeger exporter
	exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url)))
	if err != nil {
		return nil, err
	}
	tp := tracesdk.NewTracerProvider(
		// Always be sure to batch in production.
		tracesdk.WithBatcher(exp),
		// Record information about this application in an Resource.
		tracesdk.WithResource(resource.NewWithAttributes(
			semconv.SchemaURL,
			semconv.ServiceNameKey.String(service),
			attribute.String("environment", environment),
			attribute.Int64("ID", id),
		)),
	)
	return tp, nil
}

func main() {
	tp, err := tracerProvider("http://localhost:14268/api/traces")
	if err != nil {
		log.Fatal(err)
	}

	// Register our TracerProvider as the global so any imported
	// instrumentation in the future will default to using it.
	otel.SetTracerProvider(tp)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Cleanly shutdown and flush telemetry when the application exits.
	defer func(ctx context.Context) {
		// Do not make the application hang when it is shutdown.
		ctx, cancel = context.WithTimeout(ctx, time.Second*5)
		defer cancel()
		if err := tp.Shutdown(ctx); err != nil {
			log.Fatal(err)
		}
	}(ctx)

	tr := tp.Tracer("component-child")

	ctx, span := tr.Start(ctx, "subFoo")
	defer span.End()

	bar(ctx)
	startListener(ctx)
}

func bar(ctx context.Context) {
	// Use the global TracerProvider.
	tr := otel.Tracer("component-child")
	_, span := tr.Start(ctx, "subBar")
	span.SetAttributes(attribute.Key("childtestset").String("childvalue"))
	defer span.End()

	// Do bar...
}

func startListener(ctx context.Context) {

	log.Info("Starting Listeners.")
	natsAddress := os.Getenv("NATS_URL")
	log.WithFields(log.Fields{
		"NatAaddress": natsAddress,
	}).Info("Listining for messages")
	if natsAddress == "" {
		natsAddress = nats.DefaultURL
	}
	nc, err := nats.Connect(natsAddress)
	if err != nil {
		log.Fatal(err)
	}
	log.Info("about to Starting Subscriber.")
	_, _ = nc.QueueSubscribe(queue,
		"child", func(m *nats.Msg) {
			log.Info("Starting Subscriber.")
			// tr := otel.Tracer("component-child")
			// _, span := tr.Start(ctx, "listener")
			// span.SetAttributes(attribute.Key("message").String("m"))
			// defer span.End()
			log.WithFields(log.Fields{
				"Event": event,
			}).Info("Child proc received event")

			t0 := time.Now()
			log.Info("%v\n", t0.Format(time.RFC3339))
			defer func() {
				log.Info("Starting defer func.")
				t1 := time.Now()
				log.Info("%v\n", t1.Format(time.RFC3339))
				log.WithFields(log.Fields{
					"message": fmt.Sprintf("%+v\n", m),
				}).Info("Status Message ")
			}()
			log.Info("good bye.")
		})
	log.Info("Returning from subscriber function")
	if err != nil {
		log.Fatal(err)
	}
	log.Info("No errors")
}
